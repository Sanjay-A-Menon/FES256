// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sha256,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.466000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=17,HLS_SYN_DSP=0,HLS_SYN_FF=7014,HLS_SYN_LUT=7454,HLS_VERSION=2019_2}" *)

module sha256 (
        ap_clk,
        ap_rst_n,
        in_stream_a_TDATA,
        in_stream_a_TVALID,
        in_stream_a_TREADY,
        in_stream_a_TLAST,
        out_stream_TDATA,
        out_stream_TVALID,
        out_stream_TREADY,
        out_stream_TLAST
);

parameter    ap_ST_fsm_state1 = 47'd1;
parameter    ap_ST_fsm_state2 = 47'd2;
parameter    ap_ST_fsm_state3 = 47'd4;
parameter    ap_ST_fsm_state4 = 47'd8;
parameter    ap_ST_fsm_state5 = 47'd16;
parameter    ap_ST_fsm_state6 = 47'd32;
parameter    ap_ST_fsm_state7 = 47'd64;
parameter    ap_ST_fsm_state8 = 47'd128;
parameter    ap_ST_fsm_state9 = 47'd256;
parameter    ap_ST_fsm_state10 = 47'd512;
parameter    ap_ST_fsm_state11 = 47'd1024;
parameter    ap_ST_fsm_state12 = 47'd2048;
parameter    ap_ST_fsm_state13 = 47'd4096;
parameter    ap_ST_fsm_state14 = 47'd8192;
parameter    ap_ST_fsm_state15 = 47'd16384;
parameter    ap_ST_fsm_state16 = 47'd32768;
parameter    ap_ST_fsm_state17 = 47'd65536;
parameter    ap_ST_fsm_state18 = 47'd131072;
parameter    ap_ST_fsm_state19 = 47'd262144;
parameter    ap_ST_fsm_state20 = 47'd524288;
parameter    ap_ST_fsm_state21 = 47'd1048576;
parameter    ap_ST_fsm_state22 = 47'd2097152;
parameter    ap_ST_fsm_state23 = 47'd4194304;
parameter    ap_ST_fsm_state24 = 47'd8388608;
parameter    ap_ST_fsm_state25 = 47'd16777216;
parameter    ap_ST_fsm_state26 = 47'd33554432;
parameter    ap_ST_fsm_state27 = 47'd67108864;
parameter    ap_ST_fsm_state28 = 47'd134217728;
parameter    ap_ST_fsm_state29 = 47'd268435456;
parameter    ap_ST_fsm_state30 = 47'd536870912;
parameter    ap_ST_fsm_state31 = 47'd1073741824;
parameter    ap_ST_fsm_state32 = 47'd2147483648;
parameter    ap_ST_fsm_state33 = 47'd4294967296;
parameter    ap_ST_fsm_state34 = 47'd8589934592;
parameter    ap_ST_fsm_state35 = 47'd17179869184;
parameter    ap_ST_fsm_state36 = 47'd34359738368;
parameter    ap_ST_fsm_state37 = 47'd68719476736;
parameter    ap_ST_fsm_state38 = 47'd137438953472;
parameter    ap_ST_fsm_state39 = 47'd274877906944;
parameter    ap_ST_fsm_state40 = 47'd549755813888;
parameter    ap_ST_fsm_state41 = 47'd1099511627776;
parameter    ap_ST_fsm_state42 = 47'd2199023255552;
parameter    ap_ST_fsm_state43 = 47'd4398046511104;
parameter    ap_ST_fsm_state44 = 47'd8796093022208;
parameter    ap_ST_fsm_state45 = 47'd17592186044416;
parameter    ap_ST_fsm_state46 = 47'd35184372088832;
parameter    ap_ST_fsm_state47 = 47'd70368744177664;

input   ap_clk;
input   ap_rst_n;
input  [31:0] in_stream_a_TDATA;
input   in_stream_a_TVALID;
output   in_stream_a_TREADY;
input   in_stream_a_TLAST;
output  [31:0] out_stream_TDATA;
output   out_stream_TVALID;
input   out_stream_TREADY;
output   out_stream_TLAST;

reg in_stream_a_TREADY;

 reg    ap_rst_n_inv;
reg   [13:0] data_address0;
reg    data_ce0;
reg    data_we0;
reg   [7:0] data_d0;
wire   [7:0] data_q0;
reg    data_ce1;
reg    data_we1;
reg   [31:0] ctx_datalen;
reg   [63:0] ctx_bitlen;
reg   [5:0] ctx_data_address0;
reg    ctx_data_ce0;
reg    ctx_data_we0;
reg   [7:0] ctx_data_d0;
wire   [7:0] ctx_data_q0;
reg   [5:0] ctx_data_address1;
reg    ctx_data_ce1;
reg    ctx_data_we1;
wire   [7:0] ctx_data_q1;
reg   [2:0] ctx_state_address0;
reg    ctx_state_ce0;
reg    ctx_state_we0;
reg   [31:0] ctx_state_d0;
wire   [31:0] ctx_state_q0;
reg   [2:0] ctx_state_address1;
reg    ctx_state_ce1;
reg    ctx_state_we1;
reg   [31:0] ctx_state_d1;
wire   [31:0] ctx_state_q1;
reg    in_stream_a_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [46:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
reg    out_stream_TDATA_blk_n;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire  signed [31:0] i_fu_369_p2;
reg  signed [31:0] i_reg_621;
wire  signed [32:0] sext_ln219_fu_393_p1;
reg  signed [32:0] sext_ln219_reg_642;
wire    ap_CS_fsm_state3;
wire   [31:0] i_6_fu_410_p2;
reg   [31:0] i_6_reg_650;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln223_fu_405_p2;
reg   [31:0] ctx_datalen_loc_0_i_s_reg_660;
wire    ap_CS_fsm_state8;
reg   [7:0] data_load_32_reg_665;
wire   [31:0] add_ln225_fu_422_p2;
reg   [31:0] add_ln225_reg_670;
wire   [0:0] icmp_ln226_fu_432_p2;
reg   [0:0] icmp_ln226_reg_676;
wire    ap_CS_fsm_state9;
wire   [63:0] grp_fu_445_p2;
reg   [63:0] add_ln228_reg_685;
wire    ap_CS_fsm_state10;
wire   [31:0] tmp_data_single_fu_456_p1;
wire   [31:0] tmp_data_single_1_fu_461_p1;
wire   [31:0] tmp_data_single_2_fu_466_p1;
wire   [31:0] tmp_data_single_3_fu_471_p1;
wire   [31:0] tmp_data_single_4_fu_476_p1;
wire   [31:0] tmp_data_single_5_fu_481_p1;
wire   [31:0] tmp_data_single_6_fu_486_p1;
wire   [31:0] tmp_data_single_7_fu_491_p1;
wire   [31:0] tmp_data_single_8_fu_496_p1;
wire   [31:0] tmp_data_single_9_fu_501_p1;
wire   [31:0] tmp_data_single_10_fu_506_p1;
wire   [31:0] tmp_data_single_11_fu_511_p1;
wire   [31:0] tmp_data_single_12_fu_516_p1;
wire   [31:0] tmp_data_single_13_fu_521_p1;
wire   [31:0] tmp_data_single_14_fu_526_p1;
wire   [31:0] tmp_data_single_15_fu_531_p1;
wire   [31:0] tmp_data_single_16_fu_536_p1;
wire   [31:0] tmp_data_single_17_fu_541_p1;
wire   [31:0] tmp_data_single_18_fu_546_p1;
wire   [31:0] tmp_data_single_19_fu_551_p1;
wire   [31:0] tmp_data_single_20_fu_556_p1;
wire   [31:0] tmp_data_single_21_fu_561_p1;
wire   [31:0] tmp_data_single_22_fu_566_p1;
wire   [31:0] tmp_data_single_23_fu_571_p1;
wire   [31:0] tmp_data_single_24_fu_576_p1;
wire   [31:0] tmp_data_single_25_fu_581_p1;
wire   [31:0] tmp_data_single_26_fu_586_p1;
wire   [31:0] tmp_data_single_27_fu_591_p1;
wire   [31:0] tmp_data_single_28_fu_596_p1;
wire   [31:0] tmp_data_single_29_fu_601_p1;
wire   [31:0] tmp_data_single_30_fu_606_p1;
wire   [31:0] tmp_data_single_31_fu_611_p1;
wire    grp_sha256_final_fu_321_ap_start;
wire    grp_sha256_final_fu_321_ap_done;
wire    grp_sha256_final_fu_321_ap_idle;
wire    grp_sha256_final_fu_321_ap_ready;
wire   [5:0] grp_sha256_final_fu_321_ctx_data_address0;
wire    grp_sha256_final_fu_321_ctx_data_ce0;
wire    grp_sha256_final_fu_321_ctx_data_we0;
wire   [7:0] grp_sha256_final_fu_321_ctx_data_d0;
wire   [5:0] grp_sha256_final_fu_321_ctx_data_address1;
wire    grp_sha256_final_fu_321_ctx_data_ce1;
wire    grp_sha256_final_fu_321_ctx_data_we1;
wire   [7:0] grp_sha256_final_fu_321_ctx_data_d1;
wire   [2:0] grp_sha256_final_fu_321_ctx_state_address0;
wire    grp_sha256_final_fu_321_ctx_state_ce0;
wire    grp_sha256_final_fu_321_ctx_state_we0;
wire   [31:0] grp_sha256_final_fu_321_ctx_state_d0;
wire   [2:0] grp_sha256_final_fu_321_ctx_state_address1;
wire    grp_sha256_final_fu_321_ctx_state_ce1;
wire    grp_sha256_final_fu_321_ctx_state_we1;
wire   [31:0] grp_sha256_final_fu_321_ctx_state_d1;
wire   [63:0] grp_sha256_final_fu_321_ctx_bitlen_o;
wire    grp_sha256_final_fu_321_ctx_bitlen_o_ap_vld;
wire   [13:0] grp_sha256_final_fu_321_data_address0;
wire    grp_sha256_final_fu_321_data_ce0;
wire    grp_sha256_final_fu_321_data_we0;
wire   [7:0] grp_sha256_final_fu_321_data_d0;
wire   [13:0] grp_sha256_final_fu_321_data_address1;
wire    grp_sha256_final_fu_321_data_ce1;
wire    grp_sha256_final_fu_321_data_we1;
wire   [7:0] grp_sha256_final_fu_321_data_d1;
wire    grp_sha256_transform_fu_337_ap_start;
wire    grp_sha256_transform_fu_337_ap_done;
wire    grp_sha256_transform_fu_337_ap_idle;
wire    grp_sha256_transform_fu_337_ap_ready;
wire   [5:0] grp_sha256_transform_fu_337_ctx_data_address0;
wire    grp_sha256_transform_fu_337_ctx_data_ce0;
wire   [5:0] grp_sha256_transform_fu_337_ctx_data_address1;
wire    grp_sha256_transform_fu_337_ctx_data_ce1;
wire   [2:0] grp_sha256_transform_fu_337_ctx_state_address0;
wire    grp_sha256_transform_fu_337_ctx_state_ce0;
wire    grp_sha256_transform_fu_337_ctx_state_we0;
wire   [31:0] grp_sha256_transform_fu_337_ctx_state_d0;
wire   [2:0] grp_sha256_transform_fu_337_ctx_state_address1;
wire    grp_sha256_transform_fu_337_ctx_state_ce1;
wire    grp_sha256_transform_fu_337_ctx_state_we1;
wire   [31:0] grp_sha256_transform_fu_337_ctx_state_d1;
reg   [31:0] valIn_a_0_0_reg_277;
wire   [0:0] icmp_ln144_fu_375_p2;
reg  signed [31:0] i_0_reg_286;
wire   [0:0] ap_phi_mux_ctx_datalen_flag_0_i_phi_fu_302_p4;
reg   [0:0] ctx_datalen_flag_0_i_reg_297;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state11;
reg    ap_block_state11_on_subcall_done;
reg   [31:0] i_0_i_reg_310;
reg    grp_sha256_final_fu_321_ap_start_reg;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
reg    grp_sha256_transform_fu_337_ap_start_reg;
wire  signed [63:0] sext_ln141_fu_364_p1;
wire   [63:0] zext_ln223_fu_396_p1;
wire   [63:0] zext_ln224_fu_428_p1;
reg   [31:0] ctx_datalen_loc_0_i_fu_162;
wire   [7:0] trunc_ln141_fu_359_p1;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [32:0] zext_ln223_1_fu_401_p1;
reg   [46:0] ap_NS_fsm;
wire    regslice_both_out_stream_V_data_single_U_apdone_blk;
wire    regslice_both_in_stream_a_V_data_single_U_apdone_blk;
wire   [31:0] in_stream_a_TDATA_int;
wire    in_stream_a_TVALID_int;
reg    in_stream_a_TREADY_int;
wire    regslice_both_in_stream_a_V_data_single_U_ack_in;
wire    regslice_both_w1_in_stream_a_V_last_U_apdone_blk;
wire    in_stream_a_TLAST_int;
wire    regslice_both_w1_in_stream_a_V_last_U_vld_out;
wire    regslice_both_w1_in_stream_a_V_last_U_ack_in;
reg   [31:0] out_stream_TDATA_int;
reg    out_stream_TVALID_int;
wire    out_stream_TREADY_int;
wire    regslice_both_out_stream_V_data_single_U_vld_out;
wire    regslice_both_w1_out_stream_V_last_U_apdone_blk;
reg    out_stream_TLAST_int;
wire    regslice_both_w1_out_stream_V_last_U_ack_in_dummy;
wire    regslice_both_w1_out_stream_V_last_U_vld_out;

// power-on initialization
initial begin
#0 ctx_datalen = 32'd0;
#0 ctx_bitlen = 64'd0;
#0 ap_CS_fsm = 47'd1;
#0 grp_sha256_final_fu_321_ap_start_reg = 1'b0;
#0 grp_sha256_transform_fu_337_ap_start_reg = 1'b0;
end

sha256_data #(
    .DataWidth( 8 ),
    .AddressRange( 10000 ),
    .AddressWidth( 14 ))
data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_address0),
    .ce0(data_ce0),
    .we0(data_we0),
    .d0(data_d0),
    .q0(data_q0),
    .address1(grp_sha256_final_fu_321_data_address1),
    .ce1(data_ce1),
    .we1(data_we1),
    .d1(grp_sha256_final_fu_321_data_d1)
);

sha256_ctx_data #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
ctx_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ctx_data_address0),
    .ce0(ctx_data_ce0),
    .we0(ctx_data_we0),
    .d0(ctx_data_d0),
    .q0(ctx_data_q0),
    .address1(ctx_data_address1),
    .ce1(ctx_data_ce1),
    .we1(ctx_data_we1),
    .d1(grp_sha256_final_fu_321_ctx_data_d1),
    .q1(ctx_data_q1)
);

sha256_ctx_state #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
ctx_state_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ctx_state_address0),
    .ce0(ctx_state_ce0),
    .we0(ctx_state_we0),
    .d0(ctx_state_d0),
    .q0(ctx_state_q0),
    .address1(ctx_state_address1),
    .ce1(ctx_state_ce1),
    .we1(ctx_state_we1),
    .d1(ctx_state_d1),
    .q1(ctx_state_q1)
);

sha256_final grp_sha256_final_fu_321(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha256_final_fu_321_ap_start),
    .ap_done(grp_sha256_final_fu_321_ap_done),
    .ap_idle(grp_sha256_final_fu_321_ap_idle),
    .ap_ready(grp_sha256_final_fu_321_ap_ready),
    .ctx_datalen(ctx_datalen),
    .ctx_data_address0(grp_sha256_final_fu_321_ctx_data_address0),
    .ctx_data_ce0(grp_sha256_final_fu_321_ctx_data_ce0),
    .ctx_data_we0(grp_sha256_final_fu_321_ctx_data_we0),
    .ctx_data_d0(grp_sha256_final_fu_321_ctx_data_d0),
    .ctx_data_q0(ctx_data_q0),
    .ctx_data_address1(grp_sha256_final_fu_321_ctx_data_address1),
    .ctx_data_ce1(grp_sha256_final_fu_321_ctx_data_ce1),
    .ctx_data_we1(grp_sha256_final_fu_321_ctx_data_we1),
    .ctx_data_d1(grp_sha256_final_fu_321_ctx_data_d1),
    .ctx_data_q1(ctx_data_q1),
    .ctx_state_address0(grp_sha256_final_fu_321_ctx_state_address0),
    .ctx_state_ce0(grp_sha256_final_fu_321_ctx_state_ce0),
    .ctx_state_we0(grp_sha256_final_fu_321_ctx_state_we0),
    .ctx_state_d0(grp_sha256_final_fu_321_ctx_state_d0),
    .ctx_state_q0(ctx_state_q0),
    .ctx_state_address1(grp_sha256_final_fu_321_ctx_state_address1),
    .ctx_state_ce1(grp_sha256_final_fu_321_ctx_state_ce1),
    .ctx_state_we1(grp_sha256_final_fu_321_ctx_state_we1),
    .ctx_state_d1(grp_sha256_final_fu_321_ctx_state_d1),
    .ctx_state_q1(ctx_state_q1),
    .ctx_bitlen_i(ctx_bitlen),
    .ctx_bitlen_o(grp_sha256_final_fu_321_ctx_bitlen_o),
    .ctx_bitlen_o_ap_vld(grp_sha256_final_fu_321_ctx_bitlen_o_ap_vld),
    .data_address0(grp_sha256_final_fu_321_data_address0),
    .data_ce0(grp_sha256_final_fu_321_data_ce0),
    .data_we0(grp_sha256_final_fu_321_data_we0),
    .data_d0(grp_sha256_final_fu_321_data_d0),
    .data_address1(grp_sha256_final_fu_321_data_address1),
    .data_ce1(grp_sha256_final_fu_321_data_ce1),
    .data_we1(grp_sha256_final_fu_321_data_we1),
    .data_d1(grp_sha256_final_fu_321_data_d1)
);

sha256_transform grp_sha256_transform_fu_337(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha256_transform_fu_337_ap_start),
    .ap_done(grp_sha256_transform_fu_337_ap_done),
    .ap_idle(grp_sha256_transform_fu_337_ap_idle),
    .ap_ready(grp_sha256_transform_fu_337_ap_ready),
    .ctx_data_address0(grp_sha256_transform_fu_337_ctx_data_address0),
    .ctx_data_ce0(grp_sha256_transform_fu_337_ctx_data_ce0),
    .ctx_data_q0(ctx_data_q0),
    .ctx_data_address1(grp_sha256_transform_fu_337_ctx_data_address1),
    .ctx_data_ce1(grp_sha256_transform_fu_337_ctx_data_ce1),
    .ctx_data_q1(ctx_data_q1),
    .ctx_state_address0(grp_sha256_transform_fu_337_ctx_state_address0),
    .ctx_state_ce0(grp_sha256_transform_fu_337_ctx_state_ce0),
    .ctx_state_we0(grp_sha256_transform_fu_337_ctx_state_we0),
    .ctx_state_d0(grp_sha256_transform_fu_337_ctx_state_d0),
    .ctx_state_q0(ctx_state_q0),
    .ctx_state_address1(grp_sha256_transform_fu_337_ctx_state_address1),
    .ctx_state_ce1(grp_sha256_transform_fu_337_ctx_state_ce1),
    .ctx_state_we1(grp_sha256_transform_fu_337_ctx_state_we1),
    .ctx_state_d1(grp_sha256_transform_fu_337_ctx_state_d1),
    .ctx_state_q1(ctx_state_q1)
);

sha256_add_64ns_6bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sha256_add_64ns_6bkb_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ctx_bitlen),
    .din1(64'd512),
    .ce(1'b1),
    .dout(grp_fu_445_p2)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in_stream_a_V_data_single_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_stream_a_TDATA),
    .vld_in(in_stream_a_TVALID),
    .ack_in(regslice_both_in_stream_a_V_data_single_U_ack_in),
    .data_out(in_stream_a_TDATA_int),
    .vld_out(in_stream_a_TVALID_int),
    .ack_out(in_stream_a_TREADY_int),
    .apdone_blk(regslice_both_in_stream_a_V_data_single_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_in_stream_a_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_stream_a_TLAST),
    .vld_in(in_stream_a_TVALID),
    .ack_in(regslice_both_w1_in_stream_a_V_last_U_ack_in),
    .data_out(in_stream_a_TLAST_int),
    .vld_out(regslice_both_w1_in_stream_a_V_last_U_vld_out),
    .ack_out(in_stream_a_TREADY_int),
    .apdone_blk(regslice_both_w1_in_stream_a_V_last_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_stream_V_data_single_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_stream_TDATA_int),
    .vld_in(out_stream_TVALID_int),
    .ack_in(out_stream_TREADY_int),
    .data_out(out_stream_TDATA),
    .vld_out(regslice_both_out_stream_V_data_single_U_vld_out),
    .ack_out(out_stream_TREADY),
    .apdone_blk(regslice_both_out_stream_V_data_single_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_out_stream_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_stream_TLAST_int),
    .vld_in(out_stream_TVALID_int),
    .ack_in(regslice_both_w1_out_stream_V_last_U_ack_in_dummy),
    .data_out(out_stream_TLAST),
    .vld_out(regslice_both_w1_out_stream_V_last_U_vld_out),
    .ack_out(out_stream_TREADY),
    .apdone_blk(regslice_both_w1_out_stream_V_last_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_sha256_final_fu_321_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            grp_sha256_final_fu_321_ap_start_reg <= 1'b1;
        end else if ((grp_sha256_final_fu_321_ap_ready == 1'b1)) begin
            grp_sha256_final_fu_321_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_sha256_transform_fu_337_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            grp_sha256_transform_fu_337_ap_start_reg <= 1'b1;
        end else if ((grp_sha256_transform_fu_337_ap_ready == 1'b1)) begin
            grp_sha256_transform_fu_337_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state11_on_subcall_done) & (icmp_ln226_reg_676 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        ctx_bitlen <= add_ln228_reg_685;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_bitlen <= 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state13) & (grp_sha256_final_fu_321_ctx_bitlen_o_ap_vld == 1'b1))) begin
        ctx_bitlen <= grp_sha256_final_fu_321_ctx_bitlen_o;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_ctx_datalen_flag_0_i_phi_fu_302_p4 == 1'd1) & (icmp_ln223_fu_405_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        ctx_datalen <= ctx_datalen_loc_0_i_fu_162;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_datalen <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11))) begin
        ctx_datalen_flag_0_i_reg_297 <= 1'd1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_datalen_flag_0_i_reg_297 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln226_fu_432_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        ctx_datalen_loc_0_i_fu_162 <= add_ln225_reg_670;
    end else if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln226_fu_432_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)))) begin
        ctx_datalen_loc_0_i_fu_162 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11))) begin
        i_0_i_reg_310 <= i_6_reg_650;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_i_reg_310 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_a_TVALID_int == 1'b1)) begin
        if (((icmp_ln144_fu_375_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            i_0_reg_286 <= i_fu_369_p2;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            i_0_reg_286 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln225_reg_670 <= add_ln225_fu_422_p2;
        ctx_datalen_loc_0_i_s_reg_660 <= ctx_datalen_loc_0_i_fu_162;
        data_load_32_reg_665 <= data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln228_reg_685 <= grp_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_6_reg_650 <= i_6_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((in_stream_a_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_621 <= i_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        icmp_ln226_reg_676 <= icmp_ln226_fu_432_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sext_ln219_reg_642 <= sext_ln219_fu_393_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((((in_stream_a_TVALID_int == 1'b1) & (icmp_ln144_fu_375_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((in_stream_a_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        valIn_a_0_0_reg_277 <= in_stream_a_TDATA_int;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ctx_data_address0 = zext_ln224_fu_428_p1;
    end else if (((icmp_ln226_reg_676 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        ctx_data_address0 = grp_sha256_transform_fu_337_ctx_data_address0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        ctx_data_address0 = grp_sha256_final_fu_321_ctx_data_address0;
    end else begin
        ctx_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln226_reg_676 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        ctx_data_address1 = grp_sha256_transform_fu_337_ctx_data_address1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        ctx_data_address1 = grp_sha256_final_fu_321_ctx_data_address1;
    end else begin
        ctx_data_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ctx_data_ce0 = 1'b1;
    end else if (((icmp_ln226_reg_676 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        ctx_data_ce0 = grp_sha256_transform_fu_337_ctx_data_ce0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        ctx_data_ce0 = grp_sha256_final_fu_321_ctx_data_ce0;
    end else begin
        ctx_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln226_reg_676 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        ctx_data_ce1 = grp_sha256_transform_fu_337_ctx_data_ce1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        ctx_data_ce1 = grp_sha256_final_fu_321_ctx_data_ce1;
    end else begin
        ctx_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ctx_data_d0 = data_load_32_reg_665;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        ctx_data_d0 = grp_sha256_final_fu_321_ctx_data_d0;
    end else begin
        ctx_data_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ctx_data_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        ctx_data_we0 = grp_sha256_final_fu_321_ctx_data_we0;
    end else begin
        ctx_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ctx_data_we1 = grp_sha256_final_fu_321_ctx_data_we1;
    end else begin
        ctx_data_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_state_address0 = 3'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_state_address0 = 3'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_state_address0 = 3'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_state_address0 = 3'd0;
    end else if (((icmp_ln226_reg_676 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        ctx_state_address0 = grp_sha256_transform_fu_337_ctx_state_address0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        ctx_state_address0 = grp_sha256_final_fu_321_ctx_state_address0;
    end else begin
        ctx_state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_state_address1 = 3'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_state_address1 = 3'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_state_address1 = 3'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_state_address1 = 3'd1;
    end else if (((icmp_ln226_reg_676 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        ctx_state_address1 = grp_sha256_transform_fu_337_ctx_state_address1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        ctx_state_address1 = grp_sha256_final_fu_321_ctx_state_address1;
    end else begin
        ctx_state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        ctx_state_ce0 = 1'b1;
    end else if (((icmp_ln226_reg_676 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        ctx_state_ce0 = grp_sha256_transform_fu_337_ctx_state_ce0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        ctx_state_ce0 = grp_sha256_final_fu_321_ctx_state_ce0;
    end else begin
        ctx_state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        ctx_state_ce1 = 1'b1;
    end else if (((icmp_ln226_reg_676 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        ctx_state_ce1 = grp_sha256_transform_fu_337_ctx_state_ce1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        ctx_state_ce1 = grp_sha256_final_fu_321_ctx_state_ce1;
    end else begin
        ctx_state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_state_d0 = 32'd528734635;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_state_d0 = 32'd1359893119;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_state_d0 = 32'd1013904242;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_state_d0 = 32'd1779033703;
    end else if (((icmp_ln226_reg_676 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        ctx_state_d0 = grp_sha256_transform_fu_337_ctx_state_d0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        ctx_state_d0 = grp_sha256_final_fu_321_ctx_state_d0;
    end else begin
        ctx_state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_state_d1 = 32'd1541459225;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_state_d1 = 32'd2600822924;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_state_d1 = 32'd2773480762;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_state_d1 = 32'd3144134277;
    end else if (((icmp_ln226_reg_676 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        ctx_state_d1 = grp_sha256_transform_fu_337_ctx_state_d1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        ctx_state_d1 = grp_sha256_final_fu_321_ctx_state_d1;
    end else begin
        ctx_state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        ctx_state_we0 = 1'b1;
    end else if (((icmp_ln226_reg_676 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        ctx_state_we0 = grp_sha256_transform_fu_337_ctx_state_we0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        ctx_state_we0 = grp_sha256_final_fu_321_ctx_state_we0;
    end else begin
        ctx_state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        ctx_state_we1 = 1'b1;
    end else if (((icmp_ln226_reg_676 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        ctx_state_we1 = grp_sha256_transform_fu_337_ctx_state_we1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        ctx_state_we1 = grp_sha256_final_fu_321_ctx_state_we1;
    end else begin
        ctx_state_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        data_address0 = 14'd31;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        data_address0 = 14'd30;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        data_address0 = 14'd29;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        data_address0 = 14'd28;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        data_address0 = 14'd27;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        data_address0 = 14'd26;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        data_address0 = 14'd25;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        data_address0 = 14'd24;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        data_address0 = 14'd23;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        data_address0 = 14'd22;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        data_address0 = 14'd21;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        data_address0 = 14'd20;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        data_address0 = 14'd19;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        data_address0 = 14'd18;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        data_address0 = 14'd17;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        data_address0 = 14'd16;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        data_address0 = 14'd15;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        data_address0 = 14'd14;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        data_address0 = 14'd13;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        data_address0 = 14'd12;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        data_address0 = 14'd11;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        data_address0 = 14'd10;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        data_address0 = 14'd9;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        data_address0 = 14'd8;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        data_address0 = 14'd7;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        data_address0 = 14'd6;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        data_address0 = 14'd5;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        data_address0 = 14'd4;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        data_address0 = 14'd3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        data_address0 = 14'd2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        data_address0 = 14'd1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        data_address0 = 14'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        data_address0 = zext_ln223_fu_396_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_address0 = sext_ln141_fu_364_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        data_address0 = grp_sha256_final_fu_321_data_address0;
    end else begin
        data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state7) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state45)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state44)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state43)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state40)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state39)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state38)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state36)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((in_stream_a_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        data_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        data_ce0 = grp_sha256_final_fu_321_data_ce0;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        data_ce1 = grp_sha256_final_fu_321_data_ce1;
    end else begin
        data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_d0 = trunc_ln141_fu_359_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        data_d0 = grp_sha256_final_fu_321_data_d0;
    end else begin
        data_d0 = 'bx;
    end
end

always @ (*) begin
    if (((in_stream_a_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        data_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        data_we0 = grp_sha256_final_fu_321_data_we0;
    end else begin
        data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        data_we1 = grp_sha256_final_fu_321_data_we1;
    end else begin
        data_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        in_stream_a_TDATA_blk_n = in_stream_a_TVALID_int;
    end else begin
        in_stream_a_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in_stream_a_V_data_single_U_ack_in == 1'b1) & (in_stream_a_TVALID == 1'b1))) begin
        in_stream_a_TREADY = 1'b1;
    end else begin
        in_stream_a_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((in_stream_a_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((in_stream_a_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_stream_a_TREADY_int = 1'b1;
    end else begin
        in_stream_a_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15))) begin
        out_stream_TDATA_blk_n = out_stream_TREADY_int;
    end else begin
        out_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        out_stream_TDATA_int = tmp_data_single_31_fu_611_p1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        out_stream_TDATA_int = tmp_data_single_30_fu_606_p1;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        out_stream_TDATA_int = tmp_data_single_29_fu_601_p1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        out_stream_TDATA_int = tmp_data_single_28_fu_596_p1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        out_stream_TDATA_int = tmp_data_single_27_fu_591_p1;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        out_stream_TDATA_int = tmp_data_single_26_fu_586_p1;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        out_stream_TDATA_int = tmp_data_single_25_fu_581_p1;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        out_stream_TDATA_int = tmp_data_single_24_fu_576_p1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        out_stream_TDATA_int = tmp_data_single_23_fu_571_p1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        out_stream_TDATA_int = tmp_data_single_22_fu_566_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        out_stream_TDATA_int = tmp_data_single_21_fu_561_p1;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        out_stream_TDATA_int = tmp_data_single_20_fu_556_p1;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        out_stream_TDATA_int = tmp_data_single_19_fu_551_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        out_stream_TDATA_int = tmp_data_single_18_fu_546_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        out_stream_TDATA_int = tmp_data_single_17_fu_541_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        out_stream_TDATA_int = tmp_data_single_16_fu_536_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        out_stream_TDATA_int = tmp_data_single_15_fu_531_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        out_stream_TDATA_int = tmp_data_single_14_fu_526_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        out_stream_TDATA_int = tmp_data_single_13_fu_521_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        out_stream_TDATA_int = tmp_data_single_12_fu_516_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        out_stream_TDATA_int = tmp_data_single_11_fu_511_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        out_stream_TDATA_int = tmp_data_single_10_fu_506_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        out_stream_TDATA_int = tmp_data_single_9_fu_501_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        out_stream_TDATA_int = tmp_data_single_8_fu_496_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        out_stream_TDATA_int = tmp_data_single_7_fu_491_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        out_stream_TDATA_int = tmp_data_single_6_fu_486_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        out_stream_TDATA_int = tmp_data_single_5_fu_481_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        out_stream_TDATA_int = tmp_data_single_4_fu_476_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        out_stream_TDATA_int = tmp_data_single_3_fu_471_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        out_stream_TDATA_int = tmp_data_single_2_fu_466_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        out_stream_TDATA_int = tmp_data_single_1_fu_461_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        out_stream_TDATA_int = tmp_data_single_fu_456_p1;
    end else begin
        out_stream_TDATA_int = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        out_stream_TLAST_int = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15))) begin
        out_stream_TLAST_int = 1'd0;
    end else begin
        out_stream_TLAST_int = 'bx;
    end
end

always @ (*) begin
    if ((((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state46)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state45)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state44)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state43)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state40)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state39)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state38)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state36)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state15)))) begin
        out_stream_TVALID_int = 1'b1;
    end else begin
        out_stream_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((in_stream_a_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((in_stream_a_TVALID_int == 1'b1) & (icmp_ln144_fu_375_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((in_stream_a_TVALID_int == 1'b1) & (icmp_ln144_fu_375_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln223_fu_405_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln226_fu_432_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b0 == ap_block_state11_on_subcall_done) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((grp_sha256_final_fu_321_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((out_stream_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            if ((~((out_stream_TREADY_int == 1'b0) | (regslice_both_out_stream_V_data_single_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln225_fu_422_p2 = (ctx_datalen_loc_0_i_fu_162 + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state11_on_subcall_done = ((icmp_ln226_reg_676 == 1'd1) & (grp_sha256_transform_fu_337_ap_done == 1'b0));
end

assign ap_phi_mux_ctx_datalen_flag_0_i_phi_fu_302_p4 = ctx_datalen_flag_0_i_reg_297;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_sha256_final_fu_321_ap_start = grp_sha256_final_fu_321_ap_start_reg;

assign grp_sha256_transform_fu_337_ap_start = grp_sha256_transform_fu_337_ap_start_reg;

assign i_6_fu_410_p2 = (i_0_i_reg_310 + 32'd1);

assign i_fu_369_p2 = ($signed(32'd1) + $signed(i_0_reg_286));

assign icmp_ln144_fu_375_p2 = ((in_stream_a_TDATA_int == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln223_fu_405_p2 = ((zext_ln223_1_fu_401_p1 < sext_ln219_reg_642) ? 1'b1 : 1'b0);

assign icmp_ln226_fu_432_p2 = ((add_ln225_reg_670 == 32'd64) ? 1'b1 : 1'b0);

assign out_stream_TVALID = regslice_both_out_stream_V_data_single_U_vld_out;

assign sext_ln141_fu_364_p1 = i_0_reg_286;

assign sext_ln219_fu_393_p1 = i_reg_621;

assign tmp_data_single_10_fu_506_p1 = data_q0;

assign tmp_data_single_11_fu_511_p1 = data_q0;

assign tmp_data_single_12_fu_516_p1 = data_q0;

assign tmp_data_single_13_fu_521_p1 = data_q0;

assign tmp_data_single_14_fu_526_p1 = data_q0;

assign tmp_data_single_15_fu_531_p1 = data_q0;

assign tmp_data_single_16_fu_536_p1 = data_q0;

assign tmp_data_single_17_fu_541_p1 = data_q0;

assign tmp_data_single_18_fu_546_p1 = data_q0;

assign tmp_data_single_19_fu_551_p1 = data_q0;

assign tmp_data_single_1_fu_461_p1 = data_q0;

assign tmp_data_single_20_fu_556_p1 = data_q0;

assign tmp_data_single_21_fu_561_p1 = data_q0;

assign tmp_data_single_22_fu_566_p1 = data_q0;

assign tmp_data_single_23_fu_571_p1 = data_q0;

assign tmp_data_single_24_fu_576_p1 = data_q0;

assign tmp_data_single_25_fu_581_p1 = data_q0;

assign tmp_data_single_26_fu_586_p1 = data_q0;

assign tmp_data_single_27_fu_591_p1 = data_q0;

assign tmp_data_single_28_fu_596_p1 = data_q0;

assign tmp_data_single_29_fu_601_p1 = data_q0;

assign tmp_data_single_2_fu_466_p1 = data_q0;

assign tmp_data_single_30_fu_606_p1 = data_q0;

assign tmp_data_single_31_fu_611_p1 = data_q0;

assign tmp_data_single_3_fu_471_p1 = data_q0;

assign tmp_data_single_4_fu_476_p1 = data_q0;

assign tmp_data_single_5_fu_481_p1 = data_q0;

assign tmp_data_single_6_fu_486_p1 = data_q0;

assign tmp_data_single_7_fu_491_p1 = data_q0;

assign tmp_data_single_8_fu_496_p1 = data_q0;

assign tmp_data_single_9_fu_501_p1 = data_q0;

assign tmp_data_single_fu_456_p1 = data_q0;

assign trunc_ln141_fu_359_p1 = valIn_a_0_0_reg_277[7:0];

assign zext_ln223_1_fu_401_p1 = i_0_i_reg_310;

assign zext_ln223_fu_396_p1 = i_0_i_reg_310;

assign zext_ln224_fu_428_p1 = ctx_datalen_loc_0_i_s_reg_660;

endmodule //sha256
